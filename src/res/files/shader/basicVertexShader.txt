#version 130
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform float time;
uniform int texTW;
uniform int texTH;
uniform int lightAmount;
uniform vec3 lights[10];
uniform vec3 lightColors[10];

uniform float x, y, width, height;
uniform int texX;
uniform int texY;
uniform int texW;
uniform int texH;

out vec2 fragTex;
out vec3 brightness;

void main() {
    fragTex = vec2((gl_VertexID & 2)/2, gl_VertexID & 1);
    fragTex.x = (texX+fragTex.x*texW)/texTW;
    fragTex.y = 1-(texY+(1-fragTex.y)*texH)/texTH;

    vec4 pos = vec4(((gl_VertexID & 2)/2)*width + x, (gl_VertexID & 1)*height+y, 0, 1);

    brightness = vec3 (0, 0, 0);
    for (int i = 0; i < lightAmount; i++) {
        brightness += lightColors[i] * lights[i].z / ((lights[i].x - pos.x)*(lights[i].x - pos.x) + (lights[i].y - pos.y)*(lights[i].y - pos.y));
    }
    brightness = vec3(clamp(brightness.r, 0, 1),clamp(brightness.g, 0, 1),clamp(brightness.b, 0, 1));

    gl_Position = projectionMatrix * viewMatrix * pos;
}